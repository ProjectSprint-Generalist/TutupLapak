1. Get the application URL by running these commands:
{{- if .Values.app.ingress.enabled }}
{{- range $host := .Values.app.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.app.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.app.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "tutuplapak.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.app.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "tutuplapak.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "tutuplapak.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.app.service.port }}
{{- else if contains "ClusterIP" .Values.app.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "tutuplapak.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Get the application status:
  kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "tutuplapak.name" . }},app.kubernetes.io/instance={{ .Release.Name }}"

3. View logs:
  kubectl logs --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "tutuplapak.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -f

{{- if .Values.prometheus.enabled }}
4. Access Prometheus:
  kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ include "tutuplapak.prometheus.fullname" . }}-server 9090:9090
  Then open http://localhost:9090 in your browser
{{- end }}

{{- if .Values.grafana.enabled }}
5. Access Grafana:
  kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ include "tutuplapak.grafana.fullname" . }} 3000:3000
  Then open http://localhost:3000 in your browser
  Default credentials: admin / {{ .Values.grafana.adminPassword }}
{{- end }}

{{- if .Values.minio.enabled }}
6. Access MinIO Console:
  kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ include "tutuplapak.minio.fullname" . }} 9001:9001
  Then open http://localhost:9001 in your browser
  Default credentials: {{ .Values.minio.auth.rootUser }} / {{ .Values.minio.auth.rootPassword }}
{{- end }}

7. Database connection:
  kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ include "tutuplapak.postgresql.fullname" . }}-primary 5432:5432
  Then connect using: postgres://{{ .Values.database.postgresql.auth.username }}:{{ .Values.database.postgresql.auth.postgresPassword }}@localhost:5432/{{ .Values.database.postgresql.auth.database }}

8. API Documentation:
  {{- if .Values.app.ingress.enabled }}
  {{- range $host := .Values.app.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.app.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}/api/v1/health
  {{- end }}
  {{- end }}
  {{- else }}
  http://localhost:8080/api/v1/health
  {{- end }}

9. Health Check:
  curl {{- if .Values.app.ingress.enabled }}{{- range $host := .Values.app.ingress.hosts }}{{- range .paths }} http{{ if $.Values.app.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}/api/v1/health{{- end }}{{- end }}{{- else }} http://localhost:8080/api/v1/health{{- end }}

10. Metrics endpoint:
  curl {{- if .Values.app.ingress.enabled }}{{- range $host := .Values.app.ingress.hosts }}{{- range .paths }} http{{ if $.Values.app.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}/metrics{{- end }}{{- end }}{{- else }} http://localhost:8080/metrics{{- end }}
